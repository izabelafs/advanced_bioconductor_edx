lm1
plot(scos["ENSG00000172216",] ~ ws["ENSG00000172216",],
xlab="average score over accessible region",
ylab="accessible width over promoter")
plot(scos[2,] ~ ws[2,],
xlab="average score over accessible region",
ylab="accessible width over promoter")
lines( ws["ENSG00000172216",][order( ws["ENSG00000172216",])],
predict(lm1)[order( ws["ENSG00000172216",])])
p.adjust(lm1)
lm1
lm1$coefficients
lm1$residuals
lm1$qr
summary(lm1)
library(MASS)
summary(rlm(ws["ENSG00000172216",] ~ scos["ENSG00000172216",],
method = "M"))
summary(rlm(ws["ENSG00000172216",] ~ scos["ENSG00000172216",],
method = "MM"))
coefs_m = summary(rlm(ws["ENSG00000172216",]~scos["ENSG00000172216",], method="M"))$coef
coefs_mm = summary(rlm(ws["ENSG00000172216",]~scos["ENSG00000172216",], method = "MM"))$coef
coefs_m["(Intercept)"]
coefs_m
coefs_m[,3]
coefs_m[,4]
coefs_m[3]
coefs_m[4]
coefs_m[3]
coefs_m[2]
coefs_m[5]
p_mm <- 2*pnorm(-abs(coefs_mm[5]))
p_m <- 2*pnorm(-abs(coefs_m[5]))
log10(p_mm)
log10(p_m)
log(p_m)
-log(p_m)
abs
t = coefs_m[t]
t = coefs_m[4]
coefs_m
coefs_mm
p_m <- 2*pnorm(-abs(12.258060))
p_mm <- 2*pnorm(-abs(15.573744))
log(p_m)
-log(p_m)
-log10(2*pnorm(coefs_m[2,3]))
-log10(2*pnorm(coefs_mm[2,3]))
# make data frame combining accessible region width, ATAC-seq score and dexamethasone treatment duration
rr2df = data.frame(
wid=as.numeric(sapply(assay(rr2[2,]), "[", 1)),  # retrieve width
sco=as.numeric(sapply(assay(rr2[2,]), "[", 2)),  # retrieve score
dur = rr2$treatment_duration )   # duration of exposure
lm1redo = lm(wid~poly(dur,2), data=rr2df)
lm1rev = lm(wid~poly(dur,2)+sco, data=rr2df)  # extended model including score
summary(lm1redo)
summary(lm1rev)
t.test(lm1rev)
t.test(lm1rev["terms"])
?anova
anova(lm1rev,lm1redo)
lm1rev2 = lm(wid~poly(dur,2)+sco, data=rr2df, subset=-13)  # extended model
summary(lm1rev2)
summary(lm1redo)
summary(lm1rev)
0.244 + 0.186
anova(lm1redo,lm1rev)
anova(lm1rev,lm1rev2)
anova(lm2rev,lm1redo)
lm1rev2 = lm(wid~poly(dur,2)+sco, data=rr2df, subset=-13)  # extended model
anova(lm1rev2,lm1redo)
anova(lm1rev2,lm1redo)
lm1redo = lm(wid~poly(dur,2), data=rr2df)
lm1rev = lm(wid~poly(dur,2)+sco, data=rr2df)  # extended model including score
summary(lm1redo)
summary(lm1rev)
anova(lm1rev,lm1redo)
lm1rev2 = lm(wid~poly(dur,2)+sco, data=rr2df, subset=-13)  # extended model
summary(lm1rev2)
anova(lm1rev2,lm1redo)
anova(lm1rev2,lm1rev)
summary(lm1rev)
lm1rev2 = lm(wid~poly(dur,2)+sco, data=rr2df, subset=-13)  # extended model
11/2
5.5*(0.6773 - 0.1151/(1 - 0.6773))
1 - pf(1.76,2,11)
5.5*(0.1151 - 0.6773/(1 - 0.1151))
1 - pf(-3.58,2,11)
summary(lm1redo)
5.5*(0.186 - 0.1151/(1 - 0.186))
1 - pf(0.24,2,11)
summary(lm1rev2)$coef[4,4]
summary(lm1rev)$coef[4,4]
ah = AnnotationHub()
ah = AnnotationHub()
ah = AnnotationHub()
query(ah, c("cytoband", "hg38"))
head(abEncoTools::p17q, 3)
data(p17q, package = "abEncoTools")
p17q@seqnames
p17q@ranges
data(widScoSE, package = "abEncoTools")
widScoSE
widScoSE@rowRanges
widScoSE@rowRanges[which == "ORMDL3"]
widScoSE[which(widScoSE@colData == "ORMDL3")]
widScoSE[which(widScoSE@NAMES == "ORMDL3")]
widScoSE[which(widScoSE@metadata == "ORMDL3")]
widScoSE@rowRanges
widScoSE[which(widScoSE@rowRanges$gene_id == "ORMDL3")]
widScoSE[which(widScoSE@rowRanges$gene_name == "ORMDL3")]
cod <- widScoSE[which(widScoSE@rowRanges$gene_name == "ORMDL3")]
cod
rownames(ENSG00000172057)
rownames("ENSG00000172057")
rownames(widScoSE)
rownames(widScoSE) == "ENSG00000172057"
widScoSE["ENSG00000172057",]
cod <- widScoSE["ENSG00000172057",]
cod
View(cod)
cod@rowRanges
cod <- widScoSE[195,]
cod@rowRanges
cod <- widScoSE[194,]
cod@rowRanges
data(NRpoly, package = "abEncoTools")
count(NRpoly)
row(NRpoly)
NRpoly
summary(NRpoly)
str(NRpoly)
glimpse(NRpoly)
NRpoly$WSB1
length(NRpoly)
names(NRpoly)[1:5]
NRpoly[["WSB1"]]
anova(NRpoly[["WSB1"]])
allap = sapply(NRpoly, function(x) anova(x)[2,4])
head(sort(allap))
pp = function(ml) {
d = matrix(unlist(ml),nr=2)
dur = rr2$treatment_duration
plot(dur,d[1,])
}
pp(assay(widScoSE)[147,])
widScoSE[147,]
cod <- widScoSE[147,]
View(cod)
cod@rowRanges
p.adjust(allap)
fdr <- p.adjust(allap)
fdr
which(fdr < 0.05)
library(AnnotationHub)
ah = AnnotationHub()
AnnotationHub::query(ah, "ENCODExplorerData")
fm = ah[["AH75132"]] # implicitly retrieves if needed, or loads
hfm = fm[which(fm$organism == "Homo sapiens"),]  # limit to humans
tail(sort(table(hfm$assay)))
hfmc = hfm[which(hfm$assay %in% c("CRISPR RNA-seq",  "CRISPRi RNA-seq")),]
hfmc[1:4,1:5]
gq = hfmc[hfmc$output_type == "gene quantifications", ]
table(gq$assembly)
gq = gq[which(gq$assembly=="GRCh38"),]
library(GenomicFiles)
gf2 = GenomicFiles(files=gq$cloud_metadata.url)
colData(gf2) = DataFrame(gq)
tail(table(colData(gf2)$target))
poke = read.delim(files(gf2)[1], sep="\t", nrow=3)
poke
col_cl = c(gene_id = "character",    # keep only gene_id and expected_count
`transcript_id(s)` = "NULL",
length = "NULL",
effective_length = "NULL",
expected_count = "numeric",
TPM = "NULL",
FPKM = "NULL",
posterior_mean_count = "NULL",
posterior_standard_deviation_of_count = "NULL",
pme_TPM = "NULL",
pme_FPKM = "NULL",
TPM_ci_lower_bound = "NULL",
TPM_ci_upper_bound = "NULL",
FPKM_ci_lower_bound = "NULL",
FPKM_ci_upper_bound = "NULL")
get_EC = function (range, file, colClasses=NULL, ...) {
x = as.data.frame(data.table::fread(file, colClasses = colClasses,
showProgress=FALSE, ...))
rownames(x) = x[, 1]    # row names are gene_id
x = x[, 2, drop = FALSE]    # first and only column is expected counts
colnames(x) = gsub(".tsv", "", basename(file))    # column name is sample name
x
}
library(BiocParallel)
register(SerialParam())
rowRanges(gf2) = GenomicRanges::GRanges("chr0", IRanges(1,2)) # dummy range
lk6 = reduceByFile(gf2[,1:6], MAP=function(range, file, ...) {
get_EC(range, file, colClasses=col_cl)
})
fulldf = do.call(cbind, unlist(lk6, recursive=FALSE))
fulldf[1001:1003,]
data(criEC, package = "abEncoTools")    # full data from 266 files as SummarizedExperiment
table(criEC$biosample_name)
criEC@colData$investigated_as
criEC@colData$target
criEC@colData$target == "RNA binding protein"
criEC@colData$investigated_as == "RNA binding protein"
count(criEC@colData$investigated_as == "RNA binding protein")
length(criEC@colData$investigated_as == "RNA binding protein")
length(criEC@colData$investigated_as == "RNA binding protein") == TRUE
length((criEC@colData$investigated_as == "RNA binding protein") == TRUE)
z <- criEC@colData$investigated_as == "RNA binding protein"
z <- sum(criEC@colData$investigated_as == "RNA binding protein")
z
z <- criEC@colData$investigated_as == "RNA binding protein"
z[z == TRUE]
sum(z[z == TRUE])
y <- z[z == TRUE]
y
z <- criEC@colData$investigated_as == "RNA binding protein"
y <- criEC[z]
criEC
y
y@colData$target
unique(y@colData$target)
sum(unique(y@colData$target))
length(y@colData$target)
length(unique(y@colData$target))
criEC@colData$investigated_as
z <- criEC@colData$investigated_as == "RNA binding protein"
z
sum(z)
y <- criEC@colData$target[z]
criEC@colData$investigated_as
y
unique(y)
z <- criEC@colData$investigated_as == "non-specific"
z
z <- criEC@colData$target == "non-specific"
z
criEC@colData$investigated_as
criEC@colData$target
z <- criEC@colData$target == "Non-specific target control"
z
y <- criEC@colData$investigated_as[-z]
y
which(table(y@colData$target)>1)
z <- criEC@colData$target == "Non-specific target control"
y <- criEC@colData$target[-z]
which(table(y@colData$target)>1)
y@colData$target
z <- criEC@colData$target == "Non-specific target control"
z
y <- criEC@colData$target[z]
y
y <- criEC@colData$target[-z]
y
y <- criEC@colData$target[-z]
y
which(table(y@colData$target)>1)
y
y <- criEC@colData$target[z]
which(table(y@colData$target)>1)
y@colData$target
y
str(y)
z <- criEC@colData$investigated_as == "RNA binding protein"
y <- criEC@colData$target[z]
y@colData$target
y
z <- criEC@colData$target == "Non-specific target control"
z
y <- criEC@colData$target[z]
y <- table(criEC@colData$target)
y
which(y>1)
sort(y)
criEC@colData$target
criEC@elementMetadata@rownames
criEC@elementMetadata@nrows
criEC@elementMetadata@elementType
criEC@elementMetadata@metadata
criEC@NAMES
criEC@rowRanges$seq_coord_system
criEC@rowRanges$gene_id
criEC@colData
criEC@colData$target
criEC@colData$file_format_specifications
criEC@colData$genome_annotation
criEC@colData$output_category
criEC@colData$
>
criEC@colData$output_type
criEC@colData$output_category
criEC@colData$nucleic_acid_term
criEC@colData$submitter_comment
criEC@colData$schema_version
criEC@colData$type
criEC@colData$schema_version
criEC@colData$treatment_id
criEC@colData$treatment
criEC@colData$assay
criEC@colData$biosample_type
criEC@colData$biosample_ontology
criEC@colData$target
criEC@colData$target == "chromatin"
unique(criEC@colData$target)
targs = criEC[,criEC$investigated_as == "chromatin remodeler"]$target
length(unique(targs))
criEC[,criEC$investigated_as == "chromatin remodeler"]
criEC[,criEC$investigated_as == "chromatin remodeler"]$target
rowData(criEC)$gene_name
unique(rowData(criEC)$gene_name)
count(rowData(criEC)$gene_name)
length(rowData(criEC)$gene_name)
assay = criEC[which(criEC@colData$target) %in% rowData(criEC)$gene_name,]
assay = which(criEC@colData$target) %in% rowData(criEC)$gene_name
assay = criEC@colData$target %in% rowData(criEC)$gene_name
assay
assay = criEC@colData$target[criEC@colData$target %in% rowData(criEC)$gene_name]
assay
assay = unique(criEC@colData$target[criEC@colData$target %in% rowData(criEC)$gene_name])
assay
sind = which(rowRanges(criEC)$gene_name == "STAT1")
contrids = grep("control", criEC$target)
expids = which(criEC$target=="STAT1")
limSE = criEC[sind, c(contrids, expids) ]
boxplot(split(as.numeric(assay(limSE)), limSE$target), ylab="STAT1 expected count")
cribox = function(target, SE) {
sind = which(rowRanges(SE)$gene_name == target)
contrids = grep("control", SE$target)
expids = which(criEC$target==target)
limSE = SE[sind, c(contrids, expids) ]
boxplot(split(as.numeric(assay(limSE)), limSE$target), ylab=paste(target, "expected count"))
}
cribox("STAT5A", criEC)
EC = assay(criEC)
bas = which(apply(EC,1,min)>1)
ECl = EC[bas,]
dim(ECl)
prc = prcomp(t(log(ECl)))
table(criEC$submitted_by)
pairs(prc$x[,1:3], pch=19, col=factor(criEC$submitted_by))
head(criEC$date_created)
datelen = 10
table(substr(criEC$date_created,1,datelen))
cribox2 = function(target, SE, datelen=10) {
sind = which(rowRanges(SE)$gene_name == target)
contrids = grep("ontrol", SE$target)
limSE = SE[sind, contrids]
fac = paste0(substr(limSE$date_created, 1, datelen),
substr(limSE$submitted_by, 1, 3))
par(mar=c(7, 4, 2, 2))    # adjust boxplot margins so labels are not cut off
boxplot(split(as.numeric(assay(limSE)), fac),
ylab = paste(target, "expected count"),
las=2)
}
cribox2("STAT1", criEC)
cribox2("STAT5A", criEC)
cribox2("TP53", criEC)
cribox2("TP53", criEC,datelen = 13)
crilm = function(target, SE, dateprec=10) {
sind = which(rowRanges(SE)$gene_name == target)
contrids = grep("control", SE$target)
limSE = SE[sind, c(contrids, which(SE$target==target)) ]
fac = paste0(substr(limSE$date_created,1,dateprec), substr(limSE$submitted_by,1,3))
istarg = rep(0,ncol(limSE))
istarg[which(limSE$target==target)]=1
ndf = data.frame(EC=as.numeric(assay(limSE)), date_conc_submitter=fac, istarg=istarg)
lm(log(EC)~date_conc_submitter+istarg, data=ndf)
}
m1 = crilm("STAT1", criEC)
summary(m1)
plot(m1, 2)
m2 = crilm("STAT5A", criEC)
summary(m2)
plot(m2, 2)
crilm_shuff = function(target, SE, dateprec=10) {
# same as crilm
sind = which(rowRanges(SE)$gene_name == target)
contrids = grep("ontrol", SE$target)
limSE = SE[sind, c(contrids, which(SE$target==target)) ]
fac = paste0(substr(limSE$date_created,1,dateprec),
substr(limSE$submitted_by,1,3))
istarg = rep(0,ncol(limSE))
istarg[which(limSE$target==target)]=1
# perform one permutation and return the resulting linear model
nel = length(istarg)
while(1) {  # defend against permutations with singular design
# randomly rearrange labels, assign to the original data frame
shuff = sample(seq_len(nel), size=nel, replace=FALSE)
ndf = data.frame(EC=as.numeric(assay(limSE)),
date_conc_submitter=fac,
istarg=istarg[shuff])
# apply a linear model to the permuted data
ans = lm(log(EC)~date_conc_submitter+istarg, data=ndf)
# keep code from breaking if answer is NA
if (!is.na(coef(ans)["istarg"]))
break
}
ans
}
set.seed(1234)
stat1null = vapply(1:1000, function(x) {
crilm_shuff("STAT1", criEC)$coef["istarg"]
}, FUN.VALUE = numeric(1))
obsstat1 = coef(m1)["istarg"]    # # observed statistic from crilm()
hist(stat1null,
xlim=c(min(c(obsstat1, min(stat1null)))-.1,
max(stat1null)+.1),
main=paste("Permutation distribution of effect of",
"CRISPR interference on STAT1 expression"))
abline(v=obsstat1)    # vertical line = observed statistic from crilm()
(1 + sum(stat1null < obsstat1)) / length(stat1null)
quantile(stat1null)
quantile(1 + stat1null)
quantile(stat1null, 0.05)
obsstat5a = coef(m2)["istarg"]
obsstat1
obsstat5a
set.seed(1234)
stat5anull = vapply(1:1000, function(x) {
crilm_shuff("STAT5A", criEC)$coef["istarg"]
}, FUN.VALUE = numeric(1))
stat5anull
obsstat5a = coef(m2)["istarg"]
obsstat5a
obsstat5a = coef(m1)["istarg"]
obsstat5a
coef(m1)["istarg"]
coef(m2)["istarg"]
coef(m3)["istarg"]
coef(m0)["istarg"]
obsstat5a = coef(m2)["istarg"]
(1 + sum(stat1null < obsstat1)) / length(stat1null)
(1 + sum(stat5anull < obsstat5a)) / length(stat1null)
library(limma)
crilimmav = function(target, SE) {
# same as previous functions
contrids = grep("control", SE$target)
limSE = SE[, c(contrids, which(SE$target==target)) ]
fac = paste0(substr(limSE$date_created,1,10), substr(limSE$submitted_by,1,3))
istarg = rep(0,ncol(limSE))
istarg[which(limSE$target==target)]=1
ndf = data.frame(date_conc_submitter=fac, istarg=istarg)
# fit models with voom
mm = model.matrix(~date_conc_submitter+istarg, data=ndf)
vv = voom(assay(limSE), design=mm, plot=FALSE)
f1 = lmFit(vv, mm)
eBayes(f1)
}
li1 = crilimmav("STAT1", criEC[bas,])
report_l = function(clout, SE=criEC, n=15, coef="istarg") {
options(digits=3)
tt = topTable(clout, coef=coef, n=n, sort.by="p")
tts = rowData(SE[rownames(tt),])$gene_name
rownames(tt) = tts
tt
}
report_l(li1)
li2 = crilimmav("TEAD4", criEC[bas,])
report_l(li2)
alltarg = unique(criEC$target)
names(allruns) = alltarg
alltarg = unique(criEC$target)
suppressMessages({
suppressWarnings({
allruns = lapply(alltarg, function(x) report_l(crilimmav(x, criEC[bas,])))
})
})
names(allruns) = alltarg
allfd = sapply(allruns, function(x) x[1, "adj.P.Val"])
sort(allfd)[1:10]
sort(allfd)
allruns
allfc = sapply(allruns, function(x) x[1, "logFC"])
allfc
sort(allfc)
allfc < 0.05
allfc[allfc < 0.05]
length(allfc[allfc < 0.05])
allruns
length(allruns[allfc < 0.05])
allruns[allfc < 0.05]
length(allruns[allruns$HMGN1 < 0.05])
allruns$HMGN1$logFC <0.05
allFC = sapply(allruns, function(x) x$loFC < 0.05)
allFC
allFC = sapply(allruns, function(x) allruns$x$loFC < 0.05)
allFC
str(allruns)
allFC = sapply(allruns, function(x) x$loFC < 0.05)
allFC
allruns$HMGN1$logFC
allFC = sapply(allruns, function(x) x$logFC < 0.05)
allFC
allruns[allFC]
allFC > 15
allFC <15
num_effects = sapply(allruns, function(x) sum(x[,"adj.P.Val"]<0.05))
sum(num_effects >= 15, na.rm = TRUE)
allruns$SYNCRIP
cribox3 = function(target, rider, SE) {
sind = which(rowRanges(SE)$gene_name == rider)
contrids = grep("control", SE$target)
limSE = SE[sind, c(contrids, which(SE$target==target)) ]
boxplot(split(as.numeric(assay(limSE)), limSE$target),
ylab=paste(rider, "expected count"),
xlab="interference target")
}
cribox3("SYNCRIP", "GSDMB", criEC[bas,])
